Keywords: ruby, ruby on rails, rails, ror, webanwendungen, dry, convention over configuration
Categories: programmierung

# Ruby

%figure.large-3.left
  %img.polaroid{ src:image_path('green-crt.jpg'), alt:'Alter Computer' }
  %figcaption Im Wandel der Zeit: Wie sieht ihre IT in 30 Jahren aus?

<figure class="two left">
<img class="polaroid" src="/attachments/ruby_logo.png" alt="Ruby Logo">
<figcaption>Rubin: Logo von Ruby</figcaption>
</figure>

Ruby (englisch für Rubin) ist eine höhere Programmiersprache, die Mitte der neunziger Jahre von dem Japaner Yukihiro Matsumoto entworfen wurde. Ruby ist vollständig objektorientiert und unterstützt zahlreiche Entwicklungsmethoden und -stile.

Ruby übernimmt Konzepte von Programmiersprachen wie Perl, Python und Smalltalk und fügt diese zu einem konsistenten und leicht zu erlernendem Gesamtwerk zusammen. Die Sprache folgt dem Designprinzip der _geringsten Überraschung_ und verhält sich somit so, wie man es von ihr erwarten würde. Viele andere Sprachen tun das nicht und erzeugen somit Mehraufwand für den Programmierer, wo eigentlich die Funktion für den Nutzer im Vordergrund stehen sollte.

## Ruby on Rails

*Rails* oder ganz kurz *RoR* ist eine in Ruby geschriebene Bibliothek, mit der moderne Webanwendungen geschrieben werden können. Die Version 1.0 wurde Ende 2005 vorgestellt und ist damit im Vergleich zu ähnlichen Bibliotheken in anderen Sprachen noch recht jung.

Der Autor David Heinemeier Hansson hatte Rails als Nebenprodukt seiner Arbeit an der kommerziellen Webanwendungung [Basecamp](http://basecamp.com) entwickelt, weil er mit den zahlreichen komplizierten Vorgängen unzufrieden war, die nötig gewesen wären, hätte er seine Arbeit auf Java und insbesondere Enterprise Java (J2EE) basiert.

In der Folge werden mit Rails zwei wesentliche Designgrundsätze verwirklicht:

* **Don't repeat yourself.**<br>
  Der auch als DRY bekannte Grundsatz sagt, dass man als Programmierer nicht gezwungen sein sollte, bereits geleistete Arbeit nochmal tun zu müssen, weil das Werkzeug dies fordert.
* **Convention oder configuration.**<br>
  In Java musste man (zumindest zu der Zeit) wirklich jeden Aspekt seiner Anwendung konfigurieren und zu dem Zweck eine Menge XML-Daten verfassen, auch wenn man eigentlich alles so machen wollte "wie immer". Rails beinhaltet viele Konventionen, die bei einem großen Teil der Programmierer als _best practice_ lange üblich sind, ohne dass man diese explizit konfigurieren müsste.

Beide Prinzipien führen dazu, dass eine Entwicklung auf der Basis von Ruby on Rails mit einem Bruchteil des Quelltextes auskommt, der bei der Verwendung anderer Frameworks notwendig gewesen wäre.
